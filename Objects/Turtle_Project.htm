<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Turtle_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Turtle_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Jun 23 23:14:15 2025
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; main &rArr; hal_entry &rArr; vofa_plus_debug_func &rArr; __2sprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[77]">bsp_prv_software_delay_loop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">bsp_prv_software_delay_loop</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_group_irq.o(.text.NMI_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3b]">R_ACMPHS_Close</a> from r_acmphs.o(.text.R_ACMPHS_Close) referenced from r_acmphs.o(.rodata.g_comparator_on_acmphs)
 <LI><a href="#[39]">R_ACMPHS_InfoGet</a> from r_acmphs.o(.text.R_ACMPHS_InfoGet) referenced from r_acmphs.o(.rodata.g_comparator_on_acmphs)
 <LI><a href="#[37]">R_ACMPHS_Open</a> from r_acmphs.o(.text.R_ACMPHS_Open) referenced from r_acmphs.o(.rodata.g_comparator_on_acmphs)
 <LI><a href="#[38]">R_ACMPHS_OutputEnable</a> from r_acmphs.o(.text.R_ACMPHS_OutputEnable) referenced from r_acmphs.o(.rodata.g_comparator_on_acmphs)
 <LI><a href="#[3a]">R_ACMPHS_StatusGet</a> from r_acmphs.o(.text.R_ACMPHS_StatusGet) referenced from r_acmphs.o(.rodata.g_comparator_on_acmphs)
 <LI><a href="#[31]">R_ADC_B_Calibrate</a> from r_adc_b.o(.text.R_ADC_B_Calibrate) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[33]">R_ADC_B_CallbackSet</a> from r_adc_b.o(.text.R_ADC_B_CallbackSet) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[34]">R_ADC_B_Close</a> from r_adc_b.o(.text.R_ADC_B_Close) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[35]">R_ADC_B_InfoGet</a> from r_adc_b.o(.text.R_ADC_B_InfoGet) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[32]">R_ADC_B_OffsetSet</a> from r_adc_b.o(.text.R_ADC_B_OffsetSet) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[29]">R_ADC_B_Open</a> from r_adc_b.o(.text.R_ADC_B_Open) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[2f]">R_ADC_B_Read</a> from r_adc_b.o(.text.R_ADC_B_Read) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[30]">R_ADC_B_Read32</a> from r_adc_b.o(.text.R_ADC_B_Read32) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[2a]">R_ADC_B_ScanCfg</a> from r_adc_b.o(.text.R_ADC_B_ScanCfg) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[2c]">R_ADC_B_ScanGroupStart</a> from r_adc_b.o(.text.R_ADC_B_ScanGroupStart) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[2b]">R_ADC_B_ScanStart</a> from r_adc_b.o(.text.R_ADC_B_ScanStart) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[2d]">R_ADC_B_ScanStop</a> from r_adc_b.o(.text.R_ADC_B_ScanStop) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[2e]">R_ADC_B_StatusGet</a> from r_adc_b.o(.text.R_ADC_B_StatusGet) referenced from r_adc_b.o(.rodata.g_adc_on_adc_b)
 <LI><a href="#[3d]">R_DAC_Close</a> from r_dac.o(.text.R_DAC_Close) referenced from r_dac.o(.rodata.g_dac_on_dac)
 <LI><a href="#[3c]">R_DAC_Open</a> from r_dac.o(.text.R_DAC_Open) referenced from r_dac.o(.rodata.g_dac_on_dac)
 <LI><a href="#[3f]">R_DAC_Start</a> from r_dac.o(.text.R_DAC_Start) referenced from r_dac.o(.rodata.g_dac_on_dac)
 <LI><a href="#[40]">R_DAC_Stop</a> from r_dac.o(.text.R_DAC_Stop) referenced from r_dac.o(.rodata.g_dac_on_dac)
 <LI><a href="#[3e]">R_DAC_Write</a> from r_dac.o(.text.R_DAC_Write) referenced from r_dac.o(.rodata.g_dac_on_dac)
 <LI><a href="#[63]">R_GPT_CallbackSet</a> from r_gpt.o(.text.R_GPT_CallbackSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[64]">R_GPT_Close</a> from r_gpt.o(.text.R_GPT_Close) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[60]">R_GPT_CompareMatchSet</a> from r_gpt.o(.text.R_GPT_CompareMatchSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[5d]">R_GPT_Disable</a> from r_gpt.o(.text.R_GPT_Disable) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[5f]">R_GPT_DutyCycleSet</a> from r_gpt.o(.text.R_GPT_DutyCycleSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[5c]">R_GPT_Enable</a> from r_gpt.o(.text.R_GPT_Enable) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[61]">R_GPT_InfoGet</a> from r_gpt.o(.text.R_GPT_InfoGet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[58]">R_GPT_Open</a> from r_gpt.o(.text.R_GPT_Open) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[5e]">R_GPT_PeriodSet</a> from r_gpt.o(.text.R_GPT_PeriodSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[5b]">R_GPT_Reset</a> from r_gpt.o(.text.R_GPT_Reset) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[59]">R_GPT_Start</a> from r_gpt.o(.text.R_GPT_Start) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[62]">R_GPT_StatusGet</a> from r_gpt.o(.text.R_GPT_StatusGet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[5a]">R_GPT_Stop</a> from r_gpt.o(.text.R_GPT_Stop) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[46]">R_GPT_THREE_PHASE_CallbackSet</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_CallbackSet) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[47]">R_GPT_THREE_PHASE_Close</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Close) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[45]">R_GPT_THREE_PHASE_DutyCycleSet</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_DutyCycleSet) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[41]">R_GPT_THREE_PHASE_Open</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Open) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[44]">R_GPT_THREE_PHASE_Reset</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Reset) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[42]">R_GPT_THREE_PHASE_Start</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Start) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[43]">R_GPT_THREE_PHASE_Stop</a> from r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Stop) referenced from r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
 <LI><a href="#[49]">R_IOPORT_Close</a> from r_ioport.o(.text.R_IOPORT_Close) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[48]">R_IOPORT_Open</a> from r_ioport.o(.text.R_IOPORT_Open) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[4b]">R_IOPORT_PinCfg</a> from r_ioport.o(.text.R_IOPORT_PinCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[4c]">R_IOPORT_PinEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PinEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[4d]">R_IOPORT_PinEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PinEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[4e]">R_IOPORT_PinRead</a> from r_ioport.o(.text.R_IOPORT_PinRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[4f]">R_IOPORT_PinWrite</a> from r_ioport.o(.text.R_IOPORT_PinWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[4a]">R_IOPORT_PinsCfg</a> from r_ioport.o(.text.R_IOPORT_PinsCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[50]">R_IOPORT_PortDirectionSet</a> from r_ioport.o(.text.R_IOPORT_PortDirectionSet) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[51]">R_IOPORT_PortEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PortEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[52]">R_IOPORT_PortEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PortEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[53]">R_IOPORT_PortRead</a> from r_ioport.o(.text.R_IOPORT_PortRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[54]">R_IOPORT_PortWrite</a> from r_ioport.o(.text.R_IOPORT_PortWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[6b]">R_SCI_B_UART_Abort</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Abort) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[69]">R_SCI_B_UART_BaudSet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_BaudSet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[6c]">R_SCI_B_UART_CallbackSet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_CallbackSet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[6d]">R_SCI_B_UART_Close</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Close) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[6a]">R_SCI_B_UART_InfoGet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_InfoGet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[66]">R_SCI_B_UART_Open</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Open) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[67]">R_SCI_B_UART_Read</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Read) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[6e]">R_SCI_B_UART_ReadStop</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_ReadStop) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[68]">R_SCI_B_UART_Write</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Write) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text.Reset_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from drv_systick.o(.text.SysTick_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[27]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[28]">adc0_callback</a> from drv_adc_cb.o(.text.adc0_callback) referenced from hal_data.o(.rodata.g_adc0_cfg)
 <LI><a href="#[18]">adc_b_adi0_isr</a> from r_adc_b.o(.text.adc_b_adi0_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[19]">adc_b_adi1_isr</a> from r_adc_b.o(.text.adc_b_adi1_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1a]">adc_b_adi2_isr</a> from r_adc_b.o(.text.adc_b_adi2_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1b]">adc_b_adi3_isr</a> from r_adc_b.o(.text.adc_b_adi3_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1c]">adc_b_adi4_isr</a> from r_adc_b.o(.text.adc_b_adi4_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1d]">adc_b_adi5678_isr</a> from r_adc_b.o(.text.adc_b_adi5678_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[16]">adc_b_calend0_isr</a> from r_adc_b.o(.text.adc_b_calend0_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[17]">adc_b_calend1_isr</a> from r_adc_b.o(.text.adc_b_calend1_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[12]">adc_b_err0_isr</a> from r_adc_b.o(.text.adc_b_err0_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[13]">adc_b_err1_isr</a> from r_adc_b.o(.text.adc_b_err1_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1e]">adc_b_fifoovf_isr</a> from r_adc_b.o(.text.adc_b_fifoovf_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1f]">adc_b_fiforeq0_isr</a> from r_adc_b.o(.text.adc_b_fiforeq0_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[20]">adc_b_fiforeq1_isr</a> from r_adc_b.o(.text.adc_b_fiforeq1_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[21]">adc_b_fiforeq2_isr</a> from r_adc_b.o(.text.adc_b_fiforeq2_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[22]">adc_b_fiforeq3_isr</a> from r_adc_b.o(.text.adc_b_fiforeq3_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[23]">adc_b_fiforeq4_isr</a> from r_adc_b.o(.text.adc_b_fiforeq4_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[24]">adc_b_fiforeq5678_isr</a> from r_adc_b.o(.text.adc_b_fiforeq5678_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[11]">adc_b_limclpi_isr</a> from r_adc_b.o(.text.adc_b_limclpi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[14]">adc_b_resovf0_isr</a> from r_adc_b.o(.text.adc_b_resovf0_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[15]">adc_b_resovf1_isr</a> from r_adc_b.o(.text.adc_b_resovf1_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[f]">comp_hs_int_isr</a> from r_acmphs.o(.text.comp_hs_int_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[36]">comparator0_callback</a> from drv_cmp_cb.o(.text.comparator0_callback) referenced from hal_data.o(.rodata.g_comparator0_cfg)
 <LI><a href="#[26]">fputc</a> from drv_uart.o(.text.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[56]">g_timer4_callback</a> from drv_hall_cb.o(.text.g_timer4_callback) referenced from hal_data.o(.rodata.g_timer4_cfg)
 <LI><a href="#[57]">g_timer5_callback</a> from drv_hall_cb.o(.text.g_timer5_callback) referenced from hal_data.o(.rodata.g_timer5_cfg)
 <LI><a href="#[10]">gpt_capture_compare_a_isr</a> from r_gpt.o(.text.gpt_capture_compare_a_isr) referenced 2 times from vector_data.o(.application_vectors)
 <LI><a href="#[25]">gpt_capture_compare_b_isr</a> from r_gpt.o(.text.gpt_capture_compare_b_isr) referenced 2 times from vector_data.o(.application_vectors)
 <LI><a href="#[70]">hall_reset</a> from drv_hall_cb.o(.text.hall_reset) referenced from drv_hall_cb.o(.data.drv_hall_capture)
 <LI><a href="#[6f]">hall_uvw_sign_clear</a> from drv_hall_cb.o(.text.hall_uvw_sign_clear) referenced from drv_hall_cb.o(.data.drv_hall_capture)
 <LI><a href="#[e]">sci_b_uart_eri_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[b]">sci_b_uart_rxi_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[d]">sci_b_uart_tei_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[c]">sci_b_uart_txi_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[55]">timer_over_under_flow_callback</a> from drv_pwm_cb.o(.text.timer_over_under_flow_callback) referenced from hal_data.o(.rodata.g_timer0_cfg)
 <LI><a href="#[65]">uart0_callback</a> from drv_uart_cb.o(.text.uart0_callback) referenced from hal_data.o(.rodata.g_uart0_cfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spd_pid_para_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_iq_pid_para_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rotor_angle_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vofa_plus_debug_func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vofa_plus_debug_func
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[ca]"></a>Default_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_group_irq.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3b]"></a>R_ACMPHS_Close</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, r_acmphs.o(.text.R_ACMPHS_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ACMPHS_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_acmphs.o(.rodata.g_comparator_on_acmphs)
</UL>
<P><STRONG><a name="[39]"></a>R_ACMPHS_InfoGet</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, r_acmphs.o(.text.R_ACMPHS_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ACMPHS_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_acmphs.o(.rodata.g_comparator_on_acmphs)
</UL>
<P><STRONG><a name="[37]"></a>R_ACMPHS_Open</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, r_acmphs.o(.text.R_ACMPHS_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_ACMPHS_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_acmphs.o(.rodata.g_comparator_on_acmphs)
</UL>
<P><STRONG><a name="[38]"></a>R_ACMPHS_OutputEnable</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, r_acmphs.o(.text.R_ACMPHS_OutputEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ACMPHS_OutputEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_acmphs.o(.rodata.g_comparator_on_acmphs)
</UL>
<P><STRONG><a name="[3a]"></a>R_ACMPHS_StatusGet</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, r_acmphs.o(.text.R_ACMPHS_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ACMPHS_StatusGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_acmphs.o(.rodata.g_comparator_on_acmphs)
</UL>
<P><STRONG><a name="[31]"></a>R_ADC_B_Calibrate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, r_adc_b.o(.text.R_ADC_B_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_B_Calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_update_calibrate_state
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_force_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[33]"></a>R_ADC_B_CallbackSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_CallbackSet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[34]"></a>R_ADC_B_Close</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, r_adc_b.o(.text.R_ADC_B_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_ADC_B_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_force_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[35]"></a>R_ADC_B_InfoGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_InfoGet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[32]"></a>R_ADC_B_OffsetSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_OffsetSet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[29]"></a>R_ADC_B_Open</STRONG> (Thumb, 538 bytes, Stack size 28 bytes, r_adc_b.o(.text.R_ADC_B_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_ADC_B_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[2f]"></a>R_ADC_B_Read</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_Read))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[30]"></a>R_ADC_B_Read32</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_Read32))
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[2a]"></a>R_ADC_B_ScanCfg</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, r_adc_b.o(.text.R_ADC_B_ScanCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = R_ADC_B_ScanCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[2c]"></a>R_ADC_B_ScanGroupStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, r_adc_b.o(.text.R_ADC_B_ScanGroupStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_B_ScanGroupStart
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[2b]"></a>R_ADC_B_ScanStart</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_ScanStart))
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[2d]"></a>R_ADC_B_ScanStop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, r_adc_b.o(.text.R_ADC_B_ScanStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_B_ScanStop
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_force_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[2e]"></a>R_ADC_B_StatusGet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_adc_b.o(.text.R_ADC_B_StatusGet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc_b.o(.rodata.g_adc_on_adc_b)
</UL>
<P><STRONG><a name="[82]"></a>R_BSP_RegisterProtectDisable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[83]"></a>R_BSP_RegisterProtectEnable</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectEnable))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[76]"></a>R_BSP_SoftwareDelay</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bsp_delay.o(.text.R_BSP_SoftwareDelay))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_ScanCfg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DAC_Start
</UL>

<P><STRONG><a name="[78]"></a>R_BSP_WarmStart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_entry.o(.text.R_BSP_WarmStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_BSP_WarmStart &rArr; R_IOPORT_Open &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3d]"></a>R_DAC_Close</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, r_dac.o(.text.R_DAC_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_DAC_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dac.o(.rodata.g_dac_on_dac)
</UL>
<P><STRONG><a name="[3c]"></a>R_DAC_Open</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, r_dac.o(.text.R_DAC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_DAC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dac_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dac.o(.rodata.g_dac_on_dac)
</UL>
<P><STRONG><a name="[3f]"></a>R_DAC_Start</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, r_dac.o(.text.R_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_DAC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dac_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dac.o(.rodata.g_dac_on_dac)
</UL>
<P><STRONG><a name="[40]"></a>R_DAC_Stop</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, r_dac.o(.text.R_DAC_Stop))
<BR>[Address Reference Count : 1]<UL><LI> r_dac.o(.rodata.g_dac_on_dac)
</UL>
<P><STRONG><a name="[3e]"></a>R_DAC_Write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, r_dac.o(.text.R_DAC_Write))
<BR>[Address Reference Count : 1]<UL><LI> r_dac.o(.rodata.g_dac_on_dac)
</UL>
<P><STRONG><a name="[63]"></a>R_GPT_CallbackSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_CallbackSet))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[64]"></a>R_GPT_Close</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, r_gpt.o(.text.R_GPT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_GPT_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[60]"></a>R_GPT_CompareMatchSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_CompareMatchSet))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[5d]"></a>R_GPT_Disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_Disable))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[5f]"></a>R_GPT_DutyCycleSet</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, r_gpt.o(.text.R_GPT_DutyCycleSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_calculate_duty_cycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[5c]"></a>R_GPT_Enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, r_gpt.o(.text.R_GPT_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_GPT_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hall_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[61]"></a>R_GPT_InfoGet</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_InfoGet))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[58]"></a>R_GPT_Open</STRONG> (Thumb, 752 bytes, Stack size 40 bytes, r_gpt.o(.text.R_GPT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_GPT_Open &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_enable_irq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_calculate_duty_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_Open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hall_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[5e]"></a>R_GPT_PeriodSet</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_PeriodSet))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[5b]"></a>R_GPT_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_Reset))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[59]"></a>R_GPT_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hall_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[62]"></a>R_GPT_StatusGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_StatusGet))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[5a]"></a>R_GPT_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_gpt.o(.text.R_GPT_Stop))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[46]"></a>R_GPT_THREE_PHASE_CallbackSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_CallbackSet))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[47]"></a>R_GPT_THREE_PHASE_Close</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_GPT_THREE_PHASE_Close &rArr; R_GPT_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[45]"></a>R_GPT_THREE_PHASE_DutyCycleSet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_DutyCycleSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_svpwm_duty_setting
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_boost_charging
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute_ctrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[41]"></a>R_GPT_THREE_PHASE_Open</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = R_GPT_THREE_PHASE_Open &rArr; R_GPT_Open &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[44]"></a>R_GPT_THREE_PHASE_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Reset))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[42]"></a>R_GPT_THREE_PHASE_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Start))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[43]"></a>R_GPT_THREE_PHASE_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_gpt_three_phase.o(.text.R_GPT_THREE_PHASE_Stop))
<BR>[Address Reference Count : 1]<UL><LI> r_gpt_three_phase.o(.rodata.g_gpt_three_phase_on_gpt_three_phase)
</UL>
<P><STRONG><a name="[49]"></a>R_IOPORT_Close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_Close))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[48]"></a>R_IOPORT_Open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_IOPORT_Open &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_io_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[4b]"></a>R_IOPORT_PinCfg</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PinCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[4c]"></a>R_IOPORT_PinEventInputRead</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinEventInputRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[4d]"></a>R_IOPORT_PinEventOutputWrite</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinEventOutputWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[4e]"></a>R_IOPORT_PinRead</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_hall_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[4f]"></a>R_IOPORT_PinWrite</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_uvw_sign_clear
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[4a]"></a>R_IOPORT_PinsCfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_PinsCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_IOPORT_PinsCfg &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[50]"></a>R_IOPORT_PortDirectionSet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_PortDirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_IOPORT_PortDirectionSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[51]"></a>R_IOPORT_PortEventInputRead</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortEventInputRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[52]"></a>R_IOPORT_PortEventOutputWrite</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortEventOutputWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[53]"></a>R_IOPORT_PortRead</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[54]"></a>R_IOPORT_PortWrite</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[6b]"></a>R_SCI_B_UART_Abort</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Abort))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[69]"></a>R_SCI_B_UART_BaudSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_BaudSet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[6c]"></a>R_SCI_B_UART_CallbackSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_CallbackSet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[6d]"></a>R_SCI_B_UART_Close</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_B_UART_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[6a]"></a>R_SCI_B_UART_InfoGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_InfoGet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[66]"></a>R_SCI_B_UART_Open</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_SCI_B_UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[67]"></a>R_SCI_B_UART_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Read))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[6e]"></a>R_SCI_B_UART_ReadStop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_ReadStop))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[68]"></a>R_SCI_B_UART_Write</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_B_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_callback
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Reset_Handler &rArr; main &rArr; hal_entry &rArr; vofa_plus_debug_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_systick.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[81]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_clocks.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7c]"></a>SystemInit</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; bsp_irq_cfg &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_assert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_common.o(.text.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_init
</UL>

<P><STRONG><a name="[28]"></a>adc0_callback</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, drv_adc_cb.o(.text.adc0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adc0_callback &rArr; m_foc_algorithm_execute &rArr; m_drag_torque_set &rArr; m_svpwm_generate &rArr; m_svpwm_duty_setting &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_execute
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_transform
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_theta_e_execute
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_obs_execute
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tripple_phase_current
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_pid_execute
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clark_transform
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_group0_filter_data
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_adc0_cfg)
</UL>
<P><STRONG><a name="[18]"></a>adc_b_adi0_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_adi0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_adi0_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[19]"></a>adc_b_adi1_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_adi1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_adi1_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1a]"></a>adc_b_adi2_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_adi2_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_adi2_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1b]"></a>adc_b_adi3_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_adi3_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_adi3_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1c]"></a>adc_b_adi4_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_adi4_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_adi4_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1d]"></a>adc_b_adi5678_isr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, r_adc_b.o(.text.adc_b_adi5678_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_b_adi5678_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[16]"></a>adc_b_calend0_isr</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, r_adc_b.o(.text.adc_b_calend0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adc_b_calend0_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_update_calibrate_state
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[17]"></a>adc_b_calend1_isr</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, r_adc_b.o(.text.adc_b_calend1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adc_b_calend1_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_update_calibrate_state
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[12]"></a>adc_b_err0_isr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_err0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_err0_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[13]"></a>adc_b_err1_isr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_err1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_err1_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1e]"></a>adc_b_fifoovf_isr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, r_adc_b.o(.text.adc_b_fifoovf_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_b_fifoovf_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1f]"></a>adc_b_fiforeq0_isr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_fiforeq0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_fiforeq0_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[20]"></a>adc_b_fiforeq1_isr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_fiforeq1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_fiforeq1_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[21]"></a>adc_b_fiforeq2_isr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_fiforeq2_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_fiforeq2_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[22]"></a>adc_b_fiforeq3_isr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_fiforeq3_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_fiforeq3_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[23]"></a>adc_b_fiforeq4_isr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_fiforeq4_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_fiforeq4_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[24]"></a>adc_b_fiforeq5678_isr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_adc_b.o(.text.adc_b_fiforeq5678_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_b_fiforeq5678_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[11]"></a>adc_b_limclpi_isr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, r_adc_b.o(.text.adc_b_limclpi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_b_limclpi_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[14]"></a>adc_b_resovf0_isr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, r_adc_b.o(.text.adc_b_resovf0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_b_resovf0_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[15]"></a>adc_b_resovf1_isr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, r_adc_b.o(.text.adc_b_resovf1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_b_resovf1_isr &rArr; adc_b_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[86]"></a>adc_group0_filter_data</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drv_adc_cb.o(.text.adc_group0_filter_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_group0_filter_data
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[91]"></a>arm_atan2_f32</STRONG> (Thumb, 540 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_atan2_f32))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chenggong_us_theta_c_calculate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_Us_thetaC_func
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_arctan_calculate
</UL>

<P><STRONG><a name="[7e]"></a>bsp_clock_init</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, bsp_clocks.o(.text.bsp_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>bsp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(.text.bsp_init_internal))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cb]"></a>bsp_init_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(.text.bsp_init_internal), UNUSED)

<P><STRONG><a name="[84]"></a>bsp_irq_cfg</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp_irq.o(.text.bsp_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_irq_cfg &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[77]"></a>bsp_prv_software_delay_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_delay.o(.text.bsp_prv_software_delay_loop))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>

<P><STRONG><a name="[90]"></a>calculate_Us_thetaC_func</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, m_current_cal.o(.text.calculate_Us_thetaC_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calculate_Us_thetaC_func
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_drag_torque_set
</UL>

<P><STRONG><a name="[b5]"></a>calib_theta_e_r_sub_angle</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, m_foc.o(.text.calib_theta_e_r_sub_angle))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[be]"></a>chenggong_parallel_position_pid_algorithm</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, m_pid.o(.text.chenggong_parallel_position_pid_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chenggong_parallel_position_pid_algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_pid_execute
</UL>

<P><STRONG><a name="[92]"></a>chenggong_us_theta_c_calculate</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, m_current_cal.o(.text.chenggong_us_theta_c_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chenggong_us_theta_c_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[88]"></a>clark_transform</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, m_current_cal.o(.text.clark_transform))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[f]"></a>comp_hs_int_isr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_acmphs.o(.text.comp_hs_int_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = comp_hs_int_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[36]"></a>comparator0_callback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_cmp_cb.o(.text.comparator0_callback))
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_comparator0_cfg)
</UL>
<P><STRONG><a name="[8a]"></a>current_pid_execute</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_foc.o(.text.current_pid_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = current_pid_execute &rArr; series_pid_func
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;series_pid_func
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[a2]"></a>current_static_error_cal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m_current_cal.o(.text.current_static_error_cal))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[94]"></a>drv_adc_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_adc.o(.text.drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drv_adc_init &rArr; R_ADC_B_ScanCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_ScanGroupStart
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_ScanCfg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[95]"></a>drv_cmp_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_cmp.o(.text.drv_cmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_cmp_init &rArr; R_ACMPHS_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ACMPHS_OutputEnable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ACMPHS_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[96]"></a>drv_dac_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_dac.o(.text.drv_dac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_dac_init &rArr; R_DAC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DAC_Start
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DAC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[97]"></a>drv_hall_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_hall.o(.text.drv_hall_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_hall_init &rArr; R_GPT_Open &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Open
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[98]"></a>drv_io_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_io.o(.text.drv_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_io_init &rArr; R_IOPORT_Open &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[a1]"></a>drv_key_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_key.o(.text.drv_key_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[99]"></a>drv_led_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_led.o(.text.drv_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_led_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[9a]"></a>drv_pwm_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, drv_pwm.o(.text.drv_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_pwm_init &rArr; R_GPT_THREE_PHASE_Open &rArr; R_GPT_Open &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_Start
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_Open
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[a0]"></a>drv_systick_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drv_systick.o(.text.drv_systick_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[9b]"></a>drv_uart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_uart.o(.text.drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_uart_init &rArr; R_SCI_B_UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[9d]"></a>drv_uart_send_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_uart.o(.text.drv_uart_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_uart_send_data &rArr; R_SCI_B_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vofa_plus_debug_func
</UL>

<P><STRONG><a name="[26]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; R_SCI_B_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[56]"></a>g_timer4_callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_hall_cb.o(.text.g_timer4_callback))
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer4_cfg)
</UL>
<P><STRONG><a name="[57]"></a>g_timer5_callback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_hall_cb.o(.text.g_timer5_callback))
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer5_cfg)
</UL>
<P><STRONG><a name="[87]"></a>get_tripple_phase_current</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, m_current_cal.o(.text.get_tripple_phase_current))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[10]"></a>gpt_capture_compare_a_isr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, r_gpt.o(.text.gpt_capture_compare_a_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpt_capture_compare_a_isr &rArr; r_gpt_ccmp_common_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_ccmp_common_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[25]"></a>gpt_capture_compare_b_isr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, r_gpt.o(.text.gpt_capture_compare_b_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpt_capture_compare_b_isr &rArr; r_gpt_ccmp_common_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_ccmp_common_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[9f]"></a>hal_entry</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, hal_entry.o(.text.hal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = hal_entry &rArr; vofa_plus_debug_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vofa_plus_debug_func
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute_ctrl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_angle_calculate_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_obs_initial
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_calculate_Us
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_systick_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_key_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_io_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_hall_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dac_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmp_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_static_error_cal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>id_iq_pid_para_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m_pid.o(.text.id_iq_pid_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = id_iq_pid_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[aa]"></a>m_arctan_calculate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, math_utils.o(.text.m_arctan_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_arctan_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_theta_e_calculate
</UL>

<P><STRONG><a name="[a6]"></a>m_calculate_Us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, m_foc.o(.text.m_calculate_Us))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[b2]"></a>m_drag_rotor_angle_update</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, m_foc.o(.text.m_drag_rotor_angle_update))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[b3]"></a>m_drag_to_close_judgement</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, m_foc.o(.text.m_drag_to_close_judgement))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[ab]"></a>m_drag_torque_set</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m_foc.o(.text.m_drag_torque_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_drag_torque_set &rArr; m_svpwm_generate &rArr; m_svpwm_duty_setting &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_svpwm_generate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_Us_thetaC_func
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[8d]"></a>m_foc_algorithm_execute</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, m_foc.o(.text.m_foc_algorithm_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_foc_algorithm_execute &rArr; m_drag_torque_set &rArr; m_svpwm_generate &rArr; m_svpwm_duty_setting &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_pid_execute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spd_pid_para_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_svpwm_generate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_drag_torque_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_drag_to_close_judgement
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_drag_rotor_angle_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_iq_pid_para_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chenggong_us_theta_c_calculate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_theta_e_r_sub_angle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_boost_charging
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rotor_angle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[b6]"></a>m_hall_get_value</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, m_rotor_angle.o(.text.m_hall_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_hall_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rotor_angle_init
</UL>

<P><STRONG><a name="[b7]"></a>m_obs_digital_LPF</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, math_utils.o(.text.m_obs_digital_LPF))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_rpm_calculate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_obs_execute
</UL>

<P><STRONG><a name="[8b]"></a>m_obs_execute</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, m_observer.o(.text.m_obs_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_obs_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_obs_digital_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[a4]"></a>m_obs_initial</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_observer.o(.text.m_obs_initial))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[b0]"></a>m_rotor_angle_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m_rotor_angle.o(.text.m_rotor_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_rotor_angle_init &rArr; m_hall_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_hall_get_value
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[a5]"></a>m_sensorless_angle_calculate_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_rotor_angle.o(.text.m_sensorless_angle_calculate_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[b8]"></a>m_sensorless_rpm_calculate</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, m_rotor_angle.o(.text.m_sensorless_rpm_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_sensorless_rpm_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_obs_digital_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_theta_e_execute
</UL>

<P><STRONG><a name="[b9]"></a>m_sensorless_theta_e_calculate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_rotor_angle.o(.text.m_sensorless_theta_e_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_sensorless_theta_e_calculate &rArr; m_arctan_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_arctan_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_theta_e_execute
</UL>

<P><STRONG><a name="[8c]"></a>m_sensorless_theta_e_execute</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_rotor_angle.o(.text.m_sensorless_theta_e_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_sensorless_theta_e_execute &rArr; m_sensorless_theta_e_calculate &rArr; m_arctan_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_theta_e_calculate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_sensorless_rpm_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[ba]"></a>m_svpwm_duty_setting</STRONG> (Thumb, 708 bytes, Stack size 32 bytes, m_svpwm.o(.text.m_svpwm_duty_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_svpwm_duty_setting &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_svpwm_generate
</UL>

<P><STRONG><a name="[ac]"></a>m_svpwm_generate</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, m_svpwm.o(.text.m_svpwm_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_svpwm_generate &rArr; m_svpwm_duty_setting &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_svpwm_duty_setting
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_cos_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_drag_torque_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[7d]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; hal_entry &rArr; vofa_plus_debug_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[ae]"></a>motor_boost_charging</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, m_ctrl.o(.text.motor_boost_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_boost_charging &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[a7]"></a>motor_execute_ctrl</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, m_ctrl.o(.text.motor_execute_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_execute_ctrl &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[af]"></a>motor_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, m_ctrl.o(.text.motor_init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[ad]"></a>motor_stop</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, m_ctrl.o(.text.motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_stop &rArr; R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_THREE_PHASE_DutyCycleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[89]"></a>park_transform</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_current_cal.o(.text.park_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = park_transform &rArr; sin_cos_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_cos_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[e]"></a>sci_b_uart_eri_isr</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.sci_b_uart_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sci_b_uart_eri_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b]"></a>sci_b_uart_rxi_isr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.sci_b_uart_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sci_b_uart_rxi_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d]"></a>sci_b_uart_tei_isr</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.sci_b_uart_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sci_b_uart_tei_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[c]"></a>sci_b_uart_txi_isr</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, r_sci_b_uart.o(.text.sci_b_uart_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_b_uart_txi_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[93]"></a>series_pid_func</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, m_pid.o(.text.series_pid_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = series_pid_func
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_pid_execute
</UL>

<P><STRONG><a name="[bb]"></a>sin_cos_calculate</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, math_trigonometric.o(.text.sin_cos_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sin_cos_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_svpwm_generate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_transform
</UL>

<P><STRONG><a name="[b1]"></a>spd_pid_para_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_pid.o(.text.spd_pid_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spd_pid_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[b4]"></a>speed_pid_execute</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, m_foc.o(.text.speed_pid_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = speed_pid_execute &rArr; chenggong_parallel_position_pid_algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chenggong_parallel_position_pid_algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_foc_algorithm_execute
</UL>

<P><STRONG><a name="[8e]"></a>tick_execute</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, m_tick.o(.text.tick_execute))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc0_callback
</UL>

<P><STRONG><a name="[55]"></a>timer_over_under_flow_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_pwm_cb.o(.text.timer_over_under_flow_callback))
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer0_cfg)
</UL>
<P><STRONG><a name="[65]"></a>uart0_callback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_uart_cb.o(.text.uart0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_callback &rArr; R_SCI_B_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart0_cfg)
</UL>
<P><STRONG><a name="[a8]"></a>vofa_plus_debug_func</STRONG> (Thumb, 56 bytes, Stack size 264 bytes, hal_entry.o(.text.vofa_plus_debug_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vofa_plus_debug_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[c1]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cc]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[a3]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[c3]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cd]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[bf]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vofa_plus_debug_func
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[70]"></a>hall_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_hall_cb.o(.text.hall_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hall_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hall_cb.o(.data.drv_hall_capture)
</UL>
<P><STRONG><a name="[6f]"></a>hall_uvw_sign_clear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_hall_cb.o(.text.hall_uvw_sign_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hall_uvw_sign_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hall_cb.o(.data.drv_hall_capture)
</UL>
<P><STRONG><a name="[74]"></a>adc_b_force_stop</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, r_adc_b.o(.text.adc_b_force_stop))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_ScanStop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_Close
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_Calibrate
</UL>

<P><STRONG><a name="[8f]"></a>adc_b_isr_handler</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, r_adc_b.o(.text.adc_b_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc_b_isr_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_resovf1_isr
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_resovf0_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_limclpi_isr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fiforeq5678_isr
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fiforeq4_isr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fiforeq3_isr
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fiforeq2_isr
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fiforeq1_isr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fiforeq0_isr
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_fifoovf_isr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_err1_isr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_err0_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_calend1_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_calend0_isr
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_adi5678_isr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_adi4_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_adi3_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_adi2_isr
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_adi1_isr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_adi0_isr
</UL>

<P><STRONG><a name="[75]"></a>adc_b_update_calibrate_state</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, r_adc_b.o(.text.adc_b_update_calibrate_state))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_calend1_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_b_calend0_isr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_B_Calibrate
</UL>

<P><STRONG><a name="[79]"></a>gpt_calculate_duty_cycle</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, r_gpt.o(.text.gpt_calculate_duty_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpt_calculate_duty_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Open
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_DutyCycleSet
</UL>

<P><STRONG><a name="[9e]"></a>r_gpt_ccmp_common_isr</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, r_gpt.o(.text.r_gpt_ccmp_common_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_gpt_ccmp_common_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_capture_compare_b_isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_capture_compare_a_isr
</UL>

<P><STRONG><a name="[7a]"></a>r_gpt_enable_irq</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, r_gpt.o(.text.r_gpt_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Open
</UL>

<P><STRONG><a name="[7b]"></a>r_ioport_pins_config</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, r_ioport.o(.text.r_ioport_pins_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r_ioport_pins_config
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinsCfg
</UL>

<P><STRONG><a name="[bc]"></a>r_sci_b_uart_call_callback</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, r_sci_b_uart.o(.text.r_sci_b_uart_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_b_uart_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
</UL>

<P><STRONG><a name="[c2]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
